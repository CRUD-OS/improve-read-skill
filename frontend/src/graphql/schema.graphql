type User {
  id: ID!
  name: String!
  token: String
}
type AuthPayload {
  user: User!
  token: String!
}

type Book {
  id: ID!
  title: String!
  chapters: Int!
  author: String!
  categories: [String!]!
  content: [String!]!
  image: [String!]!
  audio_url: [String!]!
}

type Chapter {
  bookId: ID!
  title: String
  content: [String]
  audio_url: String
}

type Content {
  id: ID!
  chapterId: ID!
  chapter: Chapter!
}

type Question {
  id: ID!
  bookId: ID!
  chapterId: ID
  question: String!
  answer: String!
  option: QuestionOptions
  createdAt: String!
  updatedAt: String!
}

type Answer {
  id: ID!
  bookId: ID!
  chapterId: ID!
  questionId: ID!
  userId: ID!
  answer: String!
  isCorrect: Boolean!
  createdAt: String!
  updatedAt: String!
}

type GeneratedQuestions {
  questions: [String!]!
  bookId: ID
  chapterId: ID
  content: String!
  difficulty: String!
  numberOfQuestions: Int!
}

type QuestionOptions {
  options: [String!]!
  explanation: String!
}

type AnswerResult {
  id: ID!
  questionId: ID!
  userAnswer: String!
  correctAnswer: String!
  isCorrect: Boolean!
  options: QuestionOptions
  explanation: String
}

type UserScore {
  userId: ID!
  bookId: ID
  chapterId: ID
  totalQuestions: Int!
  correctAnswers: Int!
  score: Int!
  percentage: Int!
}
type UserProgress {
  questionId: ID!
  question: String!
  answer: String!
  isCorrect: Boolean!
  timeDuration: Int
  timeAnswer: Int
  userName: String
  completed: Boolean
  score: Int
  explanation: String
  success: Boolean
}
type UserProgressResult {
  success: Boolean
  isCorrect: Boolean
  score: Int
  explanation: String
  userName: String
}
type Query {
  getUsers: [User!]!
  getQuestionsForBook(bookId: ID, chapterId: ID): [Question!]!
  getUserAnswers(userId: ID!, bookId: ID, chapterId: ID): [Answer!]!
  getUserScore(userId: ID!, bookId: ID, chapterId: ID): UserScore!
  getBooks: [Book!]!
  getBookById(bookId: ID!): Book!
  getUserProgress(userId: ID!): [UserProgress!]!
  getUserById(userId: ID!): User!
}

type DeleteResponse {
  success: Boolean!
  message: String
}

type Mutation {
  userProgress(
    questionId: ID!
    answer: String!
    timeDuration: Int!
    timeAnswer: Int!
    userId: ID
  ): UserProgressResult

  createUser(name: String!): AuthPayload!

  addBook(
    title: String!
    chapters: Int
    author: String
    categories: [String]
    content: String
    image: [String]
    audio_url: [String]
  ): Book!
  addContent(
    bookId: ID!
    title: String
    content: [String]
    audio_url: String
  ): Chapter!
  generateQuestions(chapter: String!): [String!]!
  generateQuestionsWithContent(
    content: String!
    bookId: ID
    chapterId: ID
    difficulty: String
    numberOfQuestions: Int
  ): GeneratedQuestions!
  generateMCQQuestions(
    content: String!
    bookId: ID
    chapterId: ID
    difficulty: String
    numberOfQuestions: Int
    language: String
  ): [Question!]!
  submitAnswer(
    questionId: ID!
    userAnswer: String!
    bookId: ID
    chapterId: ID
  ): AnswerResult!
  loginUser(name: String!): AuthPayload!

  updateBook(
    bookId: ID!
    title: String
    chapters: Int
    author: String
    categories: [String]
    content: String
    image: [String]
    audio_url: [String]
  ): Book!

  deleteBook(bookId: ID!): DeleteResponse!
}
