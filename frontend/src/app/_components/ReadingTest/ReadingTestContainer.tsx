"use client";

import { useState, useEffect } from "react";
import { Button } from "@/components/ui/button";
import {
  Card,
  CardHeader,
  CardTitle,
  CardDescription,
  CardContent,
  CardFooter,
} from "@/components/ui/card";

interface ReadingTestContainerProps {
  onClose: () => void;
}

type TestStep =
  | "waiting"
  | "selectTime"
  | "reading"
  | "finished"
  | "askCompletion"
  | "retry";

export const ReadingTestContainer = ({
  onClose,
}: ReadingTestContainerProps) => {
  const [currentStep, setCurrentStep] = useState<TestStep>("waiting");
  const [selectedTime, setSelectedTime] = useState<number | null>(null);
  const [timeLeft, setTimeLeft] = useState<number>(0);
  const [isBlurred, setIsBlurred] = useState(false);
  const [waitingCountdown, setWaitingCountdown] = useState(10);
  const [isRetry, setIsRetry] = useState(false);
  const [actualTimeTakenInSeconds, setActualTimeTakenInSeconds] = useState<
    number | null
  >(null);
  const [totalTimeSpent, setTotalTimeSpent] = useState<number>(0);

  // 10 —Å–µ–∫—É–Ω–¥ —Ö“Ø–ª—ç—ç—Ö
  useEffect(() => {
    if (currentStep === "waiting") {
      const timer = setInterval(() => {
        setWaitingCountdown((prev) => {
          if (prev <= 1) {
            setCurrentStep("selectTime");
            return 0;
          }
          return prev - 1;
        });
      }, 1000);
      return () => clearInterval(timer);
    }
  }, [currentStep]);

  // –£–Ω—à–∏—Ö —Ö—É–≥–∞—Ü–∞–∞
  useEffect(() => {
    if (currentStep === "reading" && selectedTime) {
      setTimeLeft(selectedTime * 60); // –º–∏–Ω—É—Ç -> —Å–µ–∫—É–Ω–¥
      const timer = setInterval(() => {
        setTimeLeft((prev) => {
          if (prev <= 1) {
            // –•—É–≥–∞—Ü–∞–∞ –¥—É—É—Å–∞—Ö “Ø–µ–¥ –Ω–∏–π—Ç —Ö—É–≥–∞—Ü–∞–∞–≥ —Ç–æ–æ—Ü–æ–æ–ª–æ—Ö
            const timeSpent = selectedTime * 60;
            setTotalTimeSpent((prevTotal) => prevTotal + timeSpent);
            setCurrentStep("askCompletion");
            return 0;
          }
          return prev - 1;
        });
      }, 1000);
      return () => clearInterval(timer);
    }
  }, [currentStep, selectedTime]);

  const handleTimeSelect = (minutes: number) => {
    setSelectedTime(minutes);
    setIsBlurred(true);
    setCurrentStep("reading");
    // –≠—Ö–Ω–∏–π —Ö—É–≥–∞—Ü–∞–∞ —Å–æ–Ω–≥–æ—Ö “Ø–µ–¥ –Ω–∏–π—Ç —Ö—É–≥–∞—Ü–∞–∞–≥ —ç—Ö–ª“Ø“Ø–ª—ç—Ö
    if (!isRetry) {
      setTotalTimeSpent(0);
    }
  };

  const handleCompletionResponse = (completed: boolean) => {
    if (completed) {
      setCurrentStep("finished");
    } else {
      setIsRetry(true);
      setCurrentStep("retry");
    }
  };

  const handleRetryTimeSelect = (minutes: number) => {
    setSelectedTime(minutes);
    setIsBlurred(true);
    setCurrentStep("reading");
    // –î–∞—Ö–∏–Ω —É–Ω—à–∏—Ö “Ø–µ–¥ –Ω–∏–π—Ç —Ö—É–≥–∞—Ü–∞–∞–≥ —Ö–∞–¥–≥–∞–ª–∞—Ö
  };

  const handleFinishEarly = () => {
    if (selectedTime !== null) {
      const timeTaken = selectedTime * 60 - timeLeft;
      const totalTime = totalTimeSpent + timeTaken;
      setActualTimeTakenInSeconds(totalTime);
      setCurrentStep("finished");
    }
  };

  const formatTime = (seconds: number) => {
    const mins = Math.floor(seconds / 60);
    const secs = seconds % 60;
    return `${mins}:${secs.toString().padStart(2, "0")}`;
  };

  const formatSecondsToMinutesAndSeconds = (totalSeconds: number) => {
    const minutes = Math.floor(totalSeconds / 60);
    const seconds = totalSeconds % 60;
    return `${minutes} –º–∏–Ω—É—Ç ${seconds} —Å–µ–∫—É–Ω–¥`;
  };

  const handleCardClick = (e: React.MouseEvent) => {
    e.stopPropagation();
  };

  const renderContent = () => (
    <div className="bg-gray-50 p-4 rounded-lg">
      <h3 className="font-semibold text-black mb-2">–ê–≥—É—É–ª–≥–∞:</h3>
      <p className="text-black leading-relaxed">
        –ù—ç–≥—ç–Ω —É–¥–∞–∞ –Ω—ç–≥—ç–Ω –∑–∞–ª—É—É —Ö“Ø–Ω —Ü–∞–≥–∞–∞–Ω –º–æ—Ä–∏–π–≥ —Ö–∞—Ä–∂ –±–∞–π–≤. –¢—ç—Ä –º–æ—Ä—å –º–∞—à —Å–∞–π—Ö–∞–Ω,
        —Ü–∞–≥–∞–∞–Ω ”©–Ω–≥”©—Ç—ç–π –±–∞–π–≤. –ó–∞–ª—É—É —Ö“Ø–Ω —Ç—ç—Ä –º–æ—Ä–∏–π–≥ –±–∞—Ä–∏—Ö—ã–≥ —Ö“Ø—Å—ç–≤. –ì—ç–≤—á –º–æ—Ä—å
        —Ç“Ø“Ø–Ω–∏–π –æ–π—Ä—Ç–æ–∂ –∏—Ä—ç—Ö—ç–¥ –∑—É–≥—Ç–∞–∂ –±–∞–π–≤. –ó–∞–ª—É—É —Ö“Ø–Ω —Ç—ç–≤—á—ç—ç—Ä—Ç—ç–π–≥—ç—ç—Ä —Ö“Ø–ª—ç—ç–∂ –±–∞–π–≤.
        –≠—Ü—ç—Å—Ç—ç—ç —Ç—ç—Ä –º–æ—Ä—å —Ç“Ø“Ø–Ω–∏–π –æ–π—Ä—Ç–æ–∂ –∏—Ä—ç–≤. –ó–∞–ª—É—É —Ö“Ø–Ω —Ç—ç—Ä –º–æ—Ä–∏–π–≥ –±–∞—Ä–∏–∂ –∞–≤—á,
        —Ç“Ø“Ø–Ω—Ç—ç–π —Ö–∞–º—Ç –∞—è–ª–∂ –±–∞–π–≤.
      </p>
    </div>
  );

  const renderMetadata = () => (
    <div className="flex items-center gap-2 text-sm text-gray-500">
      <span>–ë“Ø–ª—ç–≥: 1</span>
      <span>‚Ä¢</span>
      <span>–ê–Ω–≥–∏–ª–∞–ª: “Ø–ª–≥—ç—Ä, –º–æ–Ω–≥–æ–ª</span>
    </div>
  );

  const renderTimeButtons = (
    times: number[],
    labels: string[],
    onSelect: (time: number) => void
  ) => (
    <div className="flex gap-4 justify-center">
      {times.map((time, index) => (
        <Button
          key={time}
          onClick={() => onSelect(time)}
          className="bg-gray-800 hover:bg-gray-900 text-white px-8 py-3"
        >
          {labels[index]}
        </Button>
      ))}
    </div>
  );

  return (
    <Card
      className="max-w-2xl mx-auto shadow-xl max-h-[90vh] overflow-y-auto"
      onClick={handleCardClick}
    >
      <CardHeader>
        <CardTitle className="text-2xl text-black">–¶–∞–≥–∞–∞–Ω –º–æ—Ä—å</CardTitle>
        <CardDescription className="text-lg text-gray-600">
          –ú–æ–Ω–≥–æ–ª “Ø–ª–≥—ç—Ä
        </CardDescription>
      </CardHeader>

      <CardContent className="space-y-4">
        {currentStep === "waiting" && (
          <div className="space-y-4">
            <div className="text-center py-4">
              <div className="text-6xl font-bold text-black mb-4">
                {waitingCountdown}
              </div>
              <p className="text-lg text-gray-600">
                –¢–∞ —ç—Ö—ç—ç —Ö—ç–¥—ç–Ω –º–∏–Ω—É—Ç–∞–Ω–¥ —É–Ω—à–∏—Ö–∞–∞ —Ç–æ–æ—Ü–æ–æ–ª–Ω–æ —É—É?
              </p>
            </div>
            {renderContent()}
            {renderMetadata()}
          </div>
        )}

        {currentStep === "selectTime" && (
          <div className="space-y-4">
            <div className="text-center py-4">
              <h3 className="text-xl font-semibold text-black mb-6">
                –•—ç–¥—ç–Ω –º–∏–Ω—É—Ç–∞–Ω–¥ —É–Ω—à–∏—Ö –±–æ–ª–æ–º–∂—Ç–æ–π –≤—ç?
              </h3>
              {renderTimeButtons(
                [1, 5, 10],
                ["3 –º–∏–Ω—É—Ç", "5 –º–∏–Ω—É—Ç", "10 –º–∏–Ω—É—Ç"],
                handleTimeSelect
              )}
            </div>
            <div className="blur-sm">{renderContent()}</div>
            {renderMetadata()}
          </div>
        )}

        {currentStep === "reading" && (
          <div className="space-y-4">
            <div className="flex justify-between items-center">
              <div className="text-lg font-semibold text-black">
                –•—É–≥–∞—Ü–∞–∞: {formatTime(timeLeft)}
              </div>
              <div className="text-sm text-gray-500">{selectedTime} –º–∏–Ω—É—Ç</div>
            </div>
            {renderContent()}
            {renderMetadata()}
            <div className="flex justify-end">
              <Button
                onClick={handleFinishEarly}
                className="bg-gray-800 hover:bg-gray-900 text-white px-8 py-3"
              >
                –£–Ω—à–∏–∂ –¥—É—É—Å—Å–∞–Ω
              </Button>
            </div>
          </div>
        )}

        {currentStep === "askCompletion" && (
          <div className="text-center py-8">
            <div className="text-4xl mb-4">‚è∞</div>
            <h3 className="text-xl font-semibold text-black mb-4">
              –•—É–≥–∞—Ü–∞–∞ –¥—É—É—Å–ª–∞–∞!
            </h3>
            <p className="text-lg text-gray-600 mb-6">
              –¢–∞ —ç—Ö—ç—ç –±“Ø—Ä—ç–Ω —É–Ω—à–∏–∂ –¥—É—É—Å—Å–∞–Ω —É—É?
            </p>
            <div className="flex gap-4 justify-center">
              <Button
                onClick={() => handleCompletionResponse(true)}
                className="bg-gray-800 hover:bg-gray-900 text-white px-8 py-3"
              >
                –¢–∏–π–º, –¥—É—É—Å—Å–∞–Ω
              </Button>
              <Button
                onClick={() => handleCompletionResponse(false)}
                className="bg-gray-800 hover:bg-gray-900 text-white px-8 py-3"
              >
                “Æ–≥“Ø–π, –¥—É—É—Å–∞–∞–≥“Ø–π
              </Button>
            </div>
          </div>
        )}

        {currentStep === "retry" && (
          <div className="space-y-4">
            <div className="text-center py-4">
              <h3 className="text-xl font-semibold text-black mb-6">
                –≠—Ö–∏–π–≥ –¥–∞—Ö–∏–Ω —É–Ω—à–∏–∂ “Ø–∑—ç—Ö “Ø“Ø?
              </h3>
              <p className="text-lg text-gray-600 mb-6">
                –•—É–≥–∞—Ü–∞–∞ —Å–æ–Ω–≥–æ–æ–¥ –¥–∞—Ö–∏–Ω —É–Ω—à–∏–∂ “Ø–∑—ç—ç—Ä—ç–π:
              </p>
              {renderTimeButtons(
                [1, 5, 7],
                ["2 –º–∏–Ω—É—Ç", "5 –º–∏–Ω—É—Ç", "7 –º–∏–Ω—É—Ç"],
                handleRetryTimeSelect
              )}
            </div>
            <div className="blur-sm">{renderContent()}</div>
            {renderMetadata()}
          </div>
        )}

        {currentStep === "finished" && (
          <div className="text-center py-8">
            <div className="text-4xl mb-4">üéâ</div>
            <p className="text-lg text-gray-600 mb-6">
              {actualTimeTakenInSeconds !== null
                ? `–¢–∞ ${formatSecondsToMinutesAndSeconds(
                    actualTimeTakenInSeconds
                  )} –¥–æ—Ç–æ—Ä “Ø–ª–≥—ç—Ä–∏–π–≥ —É–Ω—à—Å–∞–Ω –±–∞–π–Ω–∞.`
                : `–¢–∞ ${formatSecondsToMinutesAndSeconds(
                    totalTimeSpent
                  )} –¥–æ—Ç–æ—Ä “Ø–ª–≥—ç—Ä–∏–π–≥ —É–Ω—à—Å–∞–Ω –±–∞–π–Ω–∞.`}
            </p>
            <p className="text-sm text-gray-500">
              –î–∞—Ä–∞–∞–≥–∏–π–Ω —à–∞—Ç —Ä—É—É —à–∏–ª–∂–∏—Ö –±—ç–ª—ç–Ω –±–∞–π–Ω–∞.
            </p>
          </div>
        )}
      </CardContent>

      <CardFooter className="flex justify-between items-center">
        <Button variant="outline" onClick={onClose} className="text-black">
          –•–∞–∞—Ö
        </Button>
        {currentStep === "finished" && (
          <Button className="bg-gray-600 hover:bg-gray-700 text-white">
            –î–∞—Ä–∞–∞–≥–∏–π–Ω —à–∞—Ç
          </Button>
        )}
      </CardFooter>
    </Card>
  );
};
